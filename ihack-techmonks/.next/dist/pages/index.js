'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'D:\\downloads\\etherium_SC-main\\etherium_SC-main\\pages\\index.js?entry';


var HealthHubIndex = function (_Component) {
  (0, _inherits3.default)(HealthHubIndex, _Component);

  function HealthHubIndex() {
    (0, _classCallCheck3.default)(this, HealthHubIndex);

    return (0, _possibleConstructorReturn3.default)(this, (HealthHubIndex.__proto__ || (0, _getPrototypeOf2.default)(HealthHubIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(HealthHubIndex, [{
    key: 'renderHealthhubs',
    value: function renderHealthhubs() {
      var items = this.props.healthhubs.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement(_routes.Link, { route: '/healthhub/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 19
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 20
            }
          }, 'View Patient Data')),
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 27
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 32
        }
      }, _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 33
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }, 'Patient Data:'), _react2.default.createElement(_routes.Link, { route: '/healthhub/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 36
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: 'right',
        content: 'Create Request',
        icon: 'add circle',
        primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }))), this.renderHealthhubs()));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var healthhubs;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedContracts().call();

              case 2:
                healthhubs = _context.sent;
                return _context.abrupt('return', { healthhubs: healthhubs });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return HealthHubIndex;
}(_react.Component);

exports.default = HealthhubIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSGVhbHRoSHViSW5kZXgiLCJfQ29tcG9uZW50IiwiX19wcm90b19fIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlckhlYWx0aGh1YnMiLCJpdGVtcyIsInByb3BzIiwiaGVhbHRoaHVicyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJyb3V0ZSIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImZsb2F0ZWQiLCJjb250ZW50IiwiaWNvbiIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwibWV0aG9kcyIsImdldERlcGxveWVkQ29udHJhY3RzIiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiSGVhbHRoaHViSW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFMQSxJQUFJQSxlQUFlLDBFQUFuQjs7O0FBT0EsSUFBSUMsaUJBQWlCLFVBQVVDLFVBQVYsRUFBc0I7QUFDekMsMEJBQVVELGNBQVYsRUFBMEJDLFVBQTFCOztBQUVBLFdBQVNELGNBQVQsR0FBMEI7QUFDeEIsa0NBQWdCLElBQWhCLEVBQXNCQSxjQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxlQUFlRSxTQUFmLElBQTRCLDhCQUF1QkYsY0FBdkIsQ0FBN0IsRUFBcUVHLEtBQXJFLENBQTJFLElBQTNFLEVBQWlGQyxTQUFqRixDQUFqQyxDQUFQO0FBQ0Q7O0FBRUQs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